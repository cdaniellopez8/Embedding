import streamlit as st
import plotly.express as px
import pandas as pd
import numpy as np
import spacy
from sklearn.decomposition import PCA
from spacy.cli import download

try:
    nlp = spacy.load("es_core_news_md")
except OSError:
    download("es_core_news_md")
    nlp = spacy.load("es_core_news_md")

# Cargar modelo de spaCy en espa침ol
@st.cache_resource
def load_model():
    return spacy.load("es_core_news_md")

nlp = load_model()

# Lista de palabras (tu lista completa)
palabras = [
    # Animales
    "gato", "perro", "rat칩n", "lobo", "zorro", "tigre", "oso", "caballo", "vaca", "oveja", "cabra", "conejo",
    "ardilla", "murci칠lago", "ciervo", "jirafa", "elefante", "le칩n", "pantera", "puma", "gorila", "mono", "chimpanc칠",
    "orangut치n", "ballena", "delf칤n", "tibur칩n", "foca", "ping칲ino", "치guila", "halc칩n", "b칰ho", "paloma", "canario",
    "loro", "pavo", "pollo", "gallina", "gallo", "pato", "cisne", "ganso", "serpiente", "cocodrilo", "lagarto",
    "iguana", "sapo", "tortuga", "cangrejo", "langosta", "camello", "hipop칩tamo", "rinoceronte", "zebra", "b칰falo",
    "bisonte", "cabrito", "potro", "mula", "lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo",
    "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre",
    # Colores
    "azul", "rojo", "blanco", "negro", "verde", "naranja", "celeste", "cian", "magenta", "marron", "rosa",
    # Sentimientos
    "alegr칤a", "tristeza", "ira", "miedo", "sorpresa", "asco", "amor", "odio", "esperanza", "desesperaci칩n",
    "nostalgia", "orgullo", "verg칲enza", "culpa", "gratitud", "compasi칩n", "envidia", "celos", "ansiedad", "calma",
    "satisfacci칩n", "melancol칤a", "euforia", "pena", "soledad", "confianza", "desconfianza", "admiraci칩n", "rechazo", "ternura",
    # Filosof칤a
    "existencia", "esencia", "libertad", "determinismo", "moralidad", "칠tica", "virtud", "justicia", "verdad", "mentira",
    "belleza", "fealdad", "tiempo", "eternidad", "infinito", "causalidad", "realidad", "ilusi칩n", "ser", "nada",
    "pensamiento", "raz칩n", "emoci칩n", "conocimiento", "ignorancia", "sabidur칤a", "duda", "certeza", "voluntad", "destino",
    # Frutas y verduras
    "manzana", "banana", "sand칤a", "mel칩n", "pera", "uva", "fresa", "cereza", "lim칩n", "kiwi", "papaya", "mango", "guayaba",
    "maracuy치", "pi침a", "durazno", "ciruela", "granada", "higo", "tomate", "lechuga", "zanahoria", "cebolla", "ajo", "pepino",
    "calabaza", "berenjena", "br칩coli", "coliflor", "espinaca", "pimiento", "chile", "ma칤z", "guisante", "haba", "apio",
    "r치bano", "alcachofa", "batata",
    # Transportes
    "carro", "avi칩n", "tren", "barco", "bicicleta", "moto", "cami칩n", "metro", "cohete", "submarino", "tractor", "helic칩ptero",
    "patinete", "globo", "yate", "velero", "canoa", "kayak", "autob칰s", "tranv칤a",
    # Tecnolog칤a
    "computadora", "tel칠fono", "internet", "televisi칩n", "radio", "c치mara", "impresora", "robot", "dron", "sat칠lite",
    "teclado", "pantalla", "auriculares", "micr칩fono", "altavoz", "software", "hardware", "servidor", "red",
    # Lugares
    "ciudad", "pueblo", "aldea", "capital", "barrio", "calle", "avenida", "plaza", "puente", "parque", "jard칤n", "museo",
    "biblioteca", "universidad", "escuela", "estadio", "cine", "teatro", "restaurante", "hotel", "playa", "monta침a", "r칤o",
    "lago", "mar", "oc칠ano", "desierto", "bosque", "selva", "caverna", "volc치n", "catarata", "isla", "pen칤nsula", "glaciar",
    "acantilado", "valle", "llanura", "pradera", "costa",
    # Conceptos abstractos
    "amistad", "felicidad", "valent칤a", "fe", "paz", "guerra", "honor", "perd칩n", "solidaridad", "paciencia",
    "depresi칩n", "entusiasmo", "energ칤a", "fuerza", "debilidad", "riqueza", "pobreza", "칠xito", "fracaso", "motivaci칩n",
    "inspiraci칩n", "creatividad"
]

# Obtener vectores v치lidos
tokens = [nlp(word) for word in palabras]
all_vectors = [token.vector for token in tokens]

valid_data = [(word, vec) for word, vec in zip(palabras, all_vectors) if vec is not None and np.any(vec)]
valid_words, vectors = zip(*valid_data)
vectors = np.array(vectors)

# Reducir a 3D
pca = PCA(n_components=3)
coords = pca.fit_transform(vectors)

# DataFrame para Plotly
df = pd.DataFrame(coords, columns=["x", "y", "z"])
df["word"] = valid_words
df["color"] = "gray"

# Sidebar
with st.sidebar:
    st.markdown(
        "<h3 style='text-align: center; color: #4B4B4B;'>游댌 Buscar palabra</h3>",
        unsafe_allow_html=True
    )
    query = st.text_input("", placeholder="palabra a buscar...")

    st.markdown("<hr>", unsafe_allow_html=True)

    st.markdown("""
    <div style="text-align: center; font-size: 0.85em; color: gray;">
        Desarrollado por <strong>Carlos D. L칩pez P.</strong>
    </div>
    """, unsafe_allow_html=True)

# --- T칤tulo y descripci칩n ---
st.title(" Visualizaci칩n de embeddings en 3D (Espa침ol)")

st.markdown("""
Esta aplicaci칩n muestra una representaci칩n tridimensional de **vectores sem치nticos** de palabras en espa침ol.
Cada palabra est치 ubicada en el espacio seg칰n su similitud de significado calculada con un **modelo de lenguaje**.

 **C칩mo funciona:**
- El modelo `es_core_news_md` de spaCy asigna a cada palabra un vector de 300 dimensiones.
- Estos vectores se reducen a 3 dimensiones usando **PCA** para que puedan visualizarse.
- La similitud entre palabras se calcula usando **similitud de coseno** (1 = id칠nticos, 0 = no relacionados, -1 = opuestos).
- Si escribes una palabra en el buscador de la izquierda, se resaltar치 en rojo junto con sus **10 palabras m치s cercanas**.
- Debajo del gr치fico ver치s una **tabla** con esas palabras cercanas y su similitud de coseno.
""")

# Inicializar listas
closest_words = []
farthest_words = []

# Si hay b칰squeda
if query.strip() and query in valid_words:
    query_vec = nlp(query).vector
    sims = np.dot(vectors, query_vec) / (np.linalg.norm(vectors, axis=1) * np.linalg.norm(query_vec))
    
    # M치s cercanas
    closest_idx = sims.argsort()[::-1][1:11]
    closest_words = [(valid_words[i], sims[i]) for i in closest_idx]
    df.loc[df["word"].isin([w for w, _ in closest_words]), "color"] = "M치s cercanas"
    
    # Menos cercanas
    farthest_idx = sims.argsort()[:10]
    farthest_words = [(valid_words[i], sims[i]) for i in farthest_idx]
    df.loc[df["word"].isin([w for w, _ in farthest_words]), "color"] = "M치s lejanas"

# Visualizaci칩n 3D
fig = px.scatter_3d(df, x="x", y="y", z="z", text="word", color="color",
                    color_discrete_map={"gray": "gray", "M치s cercanas": "red", "M치s lejanas": "blue"})
fig.update_traces(marker=dict(size=4), textposition="top center")
fig.update_layout(scene=dict(xaxis_title='', yaxis_title='', zaxis_title=''))


# Mostrar gr치fico
st.plotly_chart(fig, use_container_width=True)

# Mostrar tablas **debajo del gr치fico**
if closest_words:
    st.subheader(f"Palabras m치s cercanas a '{query}'")
    st.dataframe(pd.DataFrame(closest_words, columns=["Palabra", "Similitud coseno"]))
    
if farthest_words:
    st.subheader(f"Palabras menos cercanas a '{query}'")
    st.dataframe(pd.DataFrame(farthest_words, columns=["Palabra", "Similitud coseno"]))







